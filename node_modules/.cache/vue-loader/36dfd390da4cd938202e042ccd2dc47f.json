{"remainingRequest":"/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhang/canteen_manage/src/views/statistics/stat-home/components/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhang/canteen_manage/src/views/statistics/stat-home/components/table.vue","mtime":1640246682244},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnOwppbXBvcnQgZXhjZWwgZnJvbSAnQC9saWJzL2V4Y2VsJzsKaW1wb3J0ICogYXMgZGF0YUNvbmZpZyBmcm9tICcuLi9kYXRhQ29uZmlnJzsKaW1wb3J0IHtFeHBvcnRTYXZlUGRmLCBwcmV2aWV3SW1nLCBnZXRUcmVlTm9kZXMsIGdldFRyZWVOb2RlSXRlbX0gZnJvbSAiQC9saWJzL3V0aWwiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudC10aW1lem9uZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VhcmNoVGFibGUnLAogIHByb3BzOiB7CiAgICBzdGFydERhdGU6IFN0cmluZywKICAgIGVuZERhdGU6IFN0cmluZywKICAgIHR5cGU6IFN0cmluZywKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzdGFydDogdGhpcy5zdGFydERhdGUsCiAgICAgIGVuZDogdGhpcy5lbmREYXRlLAogICAgICByb2xlOiB0aGlzLnJvbGVJZHMsCiAgICAgIGNvbHVtbnM6IFtdLAogICAgICBsb2FkaW5nMjogZmFsc2UsCiAgICAgIHN0YXROYW1lOiAnJywKICAgICAgc3RhdERhdGU6ICcnLAogICAgfTsKICB9LAoKICB3YXRjaDogewogICAgJ3N0YXJ0RGF0ZScgOiBmdW5jdGlvbih2YWwpewogICAgICB0aGlzLnN0YXJ0ID0gdmFsOwogICAgfSwKICAgICdlbmREYXRlJyA6IGZ1bmN0aW9uKHZhbCl7CiAgICAgIHRoaXMuZW5kID0gdmFsOwogICAgfSwKICAgICd0eXBlJyA6IGZ1bmN0aW9uKHZhbCl7CiAgICAgIGlmICh2YWwgPT0gJ2FwcG9pbnRtZW50Jyl7CiAgICAgICAgdGhpcy5zdGF0TmFtZSA9ICfpooTnuqbmiqXooagnOwogICAgICAgIHRoaXMuc3RhdERhdGUgPSAn6aKE57qm5pe26Ze0JzsKICAgICAgfQogICAgICBpZiAodmFsID09ICdvcmRlcicpewogICAgICAgIHRoaXMuc3RhdE5hbWUgPSAn5bCx6aSQ5oql6KGoJzsKICAgICAgICB0aGlzLnN0YXREYXRlID0gJ+WwsemkkOaXtumXtCc7CiAgICAgIH0KICAgIH0sCiAgICAncm9sZUlkcycgOiBmdW5jdGlvbih2YWwpewogICAgICB0aGlzLnJvbGUgPSB2YWw7CiAgICB9CiAgfSwKCiAgY29tcG9uZW50czoge30sCgogIGNvbXB1dGVkOiB7CiAgICByZXBvcnRTdGF0aXN0aWNzKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc3RhdGlzdGljcy5yZXBvcnRTdGF0aXN0aWNzOwogICAgfSwKICAgIGxvYWRpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5hcHAudGFibGVMb2FkaW5nOwogICAgfSwKICAgIGdldE1lcmNoYW50RGVwYXJ0bWVudExpc3QoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyLm1lcmNoYW50RGVwYXJ0bWVudExpc3Q7CiAgICB9LAogICAgc3RhdGlzdGljc1Jlc3VsdCgpIHsKICAgICAgbGV0IHN0YXRpc3RpY3NSZXN1bHQgPSB0aGlzLiRzdG9yZS5zdGF0ZS5zdGF0aXN0aWNzLnN0YXRIb21lIHx8IHt9OwogICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoc3RhdGlzdGljc1Jlc3VsdCkgPT0gInt9IikgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfTsKCiAgICAgIGxldCBkYXRhID0ge307CiAgICAgIGxldCB0YWJsZURhdGEgPSBbXTsKICAgICAgaWYgKHRoaXMudHlwZSA9PSAnYXBwb2ludG1lbnQnKXsKICAgICAgICBkYXRhID0gc3RhdGlzdGljc1Jlc3VsdC5hcHBvaW50bWVudDsKICAgICAgfQogICAgICBpZiAodGhpcy50eXBlID09ICdvcmRlcicpewogICAgICAgIGRhdGEgPSBzdGF0aXN0aWNzUmVzdWx0Lm9yZGVyOwogICAgICB9CiAgICAgIGxldCBoZWFkZXJDb2wgPSBkYXRhLnRhYmxlX2hlYWRfY29sOwogICAgICBsZXQgbmFtZSA9IHsKICAgICAgICAidGl0bGUiOiAi6aSQ56eNIiwKICAgICAgICAia2V5IjogIm5hbWUiCiAgICAgIH07CgogICAgICBsZXQgaGVhZGVyUm93ID0gZGF0YS50YWJsZV9oZWFkX3JvdzsKICAgICAgbGV0IHJlc3VsdERhdGEgPSBkYXRhLnJlc3VsdDsKCiAgICAgIGhlYWRlclJvdy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXJSb3dJdGVtLCBoZWFkZXJSb3dJbmRleCkgewogICAgICAgIGxldCBkYXRhSW5mbyA9IHsKICAgICAgICAgIG5hbWU6IGhlYWRlclJvd0l0ZW0udGl0bGUsCiAgICAgICAgfTsKICAgICAgICBoZWFkZXJDb2wuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyQ29sSXRlbSwgaGVhZGVyQ29sSW5kZXgpIHsKICAgICAgICAgIGRhdGFJbmZvW2hlYWRlckNvbEl0ZW0ua2V5XSA9IHJlc3VsdERhdGFbMF1baGVhZGVyQ29sSXRlbS5rZXkgKyAnXycgKyBoZWFkZXJSb3dJdGVtLmtleV07CiAgICAgICAgICAvLyBjb25zb2xlLmxvZygiY3JlYXRlVGFibGVEYXRhPT09ZGF0YUluZm9bIiArIGhlYWRlckNvbEl0ZW0ua2V5ICsgIl0+Pj4iICsgSlNPTi5zdHJpbmdpZnkoZGF0YUluZm9baGVhZGVyQ29sSXRlbS5rZXldKSk7CiAgICAgICAgfSk7CgogICAgICAgIHRhYmxlRGF0YS5wdXNoKGRhdGFJbmZvKTsKCiAgICAgIH0pOwoKICAgICAgaGVhZGVyQ29sLnVuc2hpZnQobmFtZSk7CgogICAgICBsZXQgbGFzdERhdGFJbmRleCA9IF8uZmluZEluZGV4KHRhYmxlRGF0YSwge25hbWU6ICflkIjorqEnfSk7CiAgICAgIGxldCBsYXN0RGF0YSA9IHRhYmxlRGF0YS5zcGxpY2UobGFzdERhdGFJbmRleCwxKTsKICAgICAgdGFibGVEYXRhLnB1c2gobGFzdERhdGFbMF0pOwoKICAgICAgdGhpcy5jb2x1bW5zID0gaGVhZGVyQ29sOwogICAgICByZXR1cm4gdGFibGVEYXRhOwogICAgfSwKCiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuaW5pdCgpOwogIH0sCgogIG1ldGhvZHM6IHsKICAgIGluaXQoKSB7CiAgICAgIC8vIHRoaXMuY29sdW1ucyA9IGRhdGFDb25maWcuY29sdW1uczsKICAgICAgLy8gdGhpcy5jcmVhdGVUYWJsZURhdGEoKTsKICAgIH0sCgogICAgcHJpbnRDb250ZXh0ICgpIHsKICAgICAgdGhpcy4kcHJpbnQodGhpcy4kcmVmcy5wcmludCk7CiAgICAgIC8vIOS4jeaJk+WNsOaWueazlTEuIOa3u+WKoG5vLXByaW505qC35byP57G7CiAgICAgIC8vIOS4jeaJk+WNsOaWueazlTIuIHRoaXMuJHByaW50KHRoaXMuJHJlZnMucHJpbnQseyduby1wcmludCc6Jy5kby1ub3QtcHJpbnQtZGl2J30pCiAgICB9LAoKICAgIHJvd0NsYXNzTmFtZSAocm93LCBpbmRleCkgewogICAgICBsZXQgdmFsdWVBcnIgPSBfLnZhbHVlcyhyb3cpOwogICAgICBpZiAoXy5pbmRleE9mKHZhbHVlQXJyLCLlvZPml6XlsI/orqEiKSAhPSAtMSl7CiAgICAgICAgcmV0dXJuICdkZW1vLXRhYmxlLWluZm8tcm93JzsKICAgICAgfSBlbHNlIGlmIChfLmluZGV4T2YodmFsdWVBcnIsIuWQiOiuoSIpICE9IC0xKSB7CiAgICAgICAgcmV0dXJuICdkZW1vLXRhYmxlLWVycm9yLXJvdyc7CiAgICAgIH0KCiAgICAgIHJldHVybiAnJzsKICAgIH0sCiAgICAvLyDlr7zlh7pQREbmlofku7YKICAgIGV4cG9ydFJlc3VsdFBkZjogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLmxvYWRpbmcyID0gdHJ1ZTsKICAgICAgbGV0IGZpbGVUeXBlID0gJ+WwsemkkOaKpeihqCc7CiAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ2FwcG9pbnRtZW50Jyl7CiAgICAgICAgZmlsZVR5cGUgPSAn6aKE57qm5oql6KGoJzsKICAgICAgfQogICAgICBpZiAodGhpcy50eXBlID09ICdvcmRlcicpewogICAgICAgIGZpbGVUeXBlID0gJ+WwsemkkOaKpeihqCc7CiAgICAgIH0KICAgICAgbGV0IHBkZk5hbWUgPSBmaWxlVHlwZSArICdfJyArIHRoaXMuc3RhcnREYXRlICsgJy0nICsgdGhpcy5lbmREYXRlOwogICAgICBsZXQgbm93VGltZT0gbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7CgogICAgICBFeHBvcnRTYXZlUGRmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGF0UHJpbnQnKSwgcGRmTmFtZSwgbm93VGltZSwgJ2wnKTsKICAgICAgdGhpcy5sb2FkaW5nMiA9IGZhbHNlOwogICAgfSwKCiAgICAvLyDlr7zlh7pFWENFTAogICAgZXhwb3J0RXhjZWw6IGZ1bmN0aW9uKCkgewogICAgICB0cnkgewogICAgICAgIGlmICh0aGlzLmNvbHVtbnMubGVuZ3RoPjApIHsKICAgICAgICAgIGxldCBmaWxlVHlwZSA9ICflsLHppJDmiqXooagnOwogICAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnYXBwb2ludG1lbnQnKXsKICAgICAgICAgICAgZmlsZVR5cGUgPSAn6aKE57qm5oql6KGoJzsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ29yZGVyJyl7CiAgICAgICAgICAgIGZpbGVUeXBlID0gJ+WwsemkkOaKpeihqCc7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBmaWxlVHlwZSArICdfJyArIHRoaXMuc3RhcnREYXRlICsgJy0nICsgdGhpcy5lbmREYXRlOwogICAgICAgICAgbGV0IGtleSA9IFtdOwogICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHRoaXMuY29sdW1ucyl7CiAgICAgICAgICAgIGxldCB0bXAgPSAnJwogICAgICAgICAgICB0bXAgPSBpdGVtLmtleT8gaXRlbS5rZXk6IGl0ZW0uc2xvdDsKICAgICAgICAgICAgaWYgKHRtcD09J2NvdW50cycpewogICAgICAgICAgICAgIHRtcCA9ICdjb3VudCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRtcD09J2Ftb3VudHMnKXsKICAgICAgICAgICAgICB0bXAgPSAnYW1vdW50JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBrZXkucHVzaCh0bXApOwogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgICB0aXRsZTogXy5wbHVjayh0aGlzLmNvbHVtbnMsICd0aXRsZScpLAogICAgICAgICAgICAvLyBrZXk6IF8ucGx1Y2sodGhpcy5jb2x1bW5zLCAna2V5JyksCiAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICBkYXRhOiB0aGlzLnN0YXRpc3RpY3NSZXN1bHQsCiAgICAgICAgICAgIGF1dG9XaWR0aDogdHJ1ZSwKICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lLAogICAgICAgICAgfTsKICAgICAgICAgIGV4Y2VsLmV4cG9ydF9hcnJheV90b19leGNlbChwYXJhbXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiRNZXNzYWdlLmluZm8oJ+ihqOagvOaVsOaNruS4jeiDveS4uuepuu+8gScpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIC8vIHRoaXMuJHN0b3JlLmNvbW1pdCgnU1RBVF9EQVlfU0VUX1BST1BFUlRZX0JZX0tFWScsIHsga2V5OiAnZXhwb3J0TG9hZGluZycsIHZhbHVlOiBmYWxzZSB9KQogICAgICB9CiAgICB9LAoKICAgIC8vIOWvvOWHugogICAgZXhwb3J0UmVzdWx0RXhjZWw6IGZ1bmN0aW9uKCkgewogICAgICB0cnkgewogICAgICAgIGlmICh0aGlzLmNvbHVtbnMubGVuZ3RoPjApIHsKICAgICAgICAgIGxldCBmaWxlVHlwZSA9ICflsLHppJDmiqXooagnOwogICAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnYXBwb2ludG1lbnQnKXsKICAgICAgICAgICAgZmlsZVR5cGUgPSAn6aKE57qm5oql6KGoJzsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ29yZGVyJyl7CiAgICAgICAgICAgIGZpbGVUeXBlID0gJ+WwsemkkOaKpeihqCc7CiAgICAgICAgICB9CiAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBmaWxlVHlwZSArICdfJyArIHRoaXMuc3RhcnREYXRlICsgJy0nICsgdGhpcy5lbmREYXRlOwogICAgICAgICAgbGV0IGtleSA9IFtdOwogICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHRoaXMuY29sdW1ucyl7CiAgICAgICAgICAgIGxldCB0bXAgPSAnJwogICAgICAgICAgICB0bXAgPSBpdGVtLmtleT8gaXRlbS5rZXk6IGl0ZW0uc2xvdDsKICAgICAgICAgICAgaWYgKHRtcD09J2NvdW50cycpewogICAgICAgICAgICAgIHRtcCA9ICdjb3VudCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRtcD09J2Ftb3VudHMnKXsKICAgICAgICAgICAgICB0bXAgPSAnYW1vdW50JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBrZXkucHVzaCh0bXApOwogICAgICAgICAgfQoKICAgICAgICAgIC8v6K6+572u5Li75qCH6aKY5qC35byPCiAgICAgICAgICBsZXQgaGVhZGVyU3R5bGUgPSB7CiAgICAgICAgICAgIGZvbnQ6IHsKICAgICAgICAgICAgICBuYW1lOiAi5a6L5L2TIiwKICAgICAgICAgICAgICBzejogMTQsCiAgICAgICAgICAgICAgY29sb3I6IHsgcmdiOiAiMDAwMDAwIiB9LAogICAgICAgICAgICAgIGJvbGQ6IHRydWUKICAgICAgICAgICAgICAvLyBpdGFsaWM6IGZhbHNlLAogICAgICAgICAgICAgIC8vIHVuZGVybGluZTogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWxpZ25tZW50OiB7CiAgICAgICAgICAgICAgaG9yaXpvbnRhbDogImNlbnRlciIsCiAgICAgICAgICAgICAgdmVydGljYWw6ICJjZW50ZXIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpbGw6IHsKICAgICAgICAgICAgICBmZ0NvbG9yOiB7cmdiOiAiODdDRUZBIn0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIOWNleWFg+agvOi+ueahhgogICAgICAgICAgICBib3JkZXI6IHsKICAgICAgICAgICAgICB0b3A6IHsKICAgICAgICAgICAgICAgIHN0eWxlOiAndGhpbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGJvdHRvbTogewogICAgICAgICAgICAgICAgc3R5bGU6ICd0aGluJwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbGVmdDogewogICAgICAgICAgICAgICAgc3R5bGU6ICd0aGluJwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgcmlnaHQ6IHsKICAgICAgICAgICAgICAgIHN0eWxlOiAndGhpbicKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICAvL+iuvue9ruS4u+agh+mimOagt+W8jwogICAgICAgICAgbGV0IGJvZHlTdHlsZSA9IHsKICAgICAgICAgICAgZm9udDogewogICAgICAgICAgICAgIC8vIG5hbWU6ICLlrovkvZMiLAogICAgICAgICAgICAgIC8vIHN6OiAxOCwKICAgICAgICAgICAgICBjb2xvcjogeyByZ2I6ICIwMDAwMDAiIH0sCiAgICAgICAgICAgICAgYm9sZDogdHJ1ZQogICAgICAgICAgICAgIC8vIGl0YWxpYzogZmFsc2UsCiAgICAgICAgICAgICAgLy8gdW5kZXJsaW5lOiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBhbGlnbm1lbnQ6IHsKICAgICAgICAgICAgICBob3Jpem9udGFsOiAiY2VudGVyIiwKICAgICAgICAgICAgICB2ZXJ0aWNhbDogImNlbnRlciIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIGZpbGw6IHsKICAgICAgICAgICAgLy8gICBmZ0NvbG9yOiB7cmdiOiAiMDA4MDAwIn0sCiAgICAgICAgICAgIC8vIH0sCgogICAgICAgICAgICAvLyDljZXlhYPmoLzovrnmoYYKICAgICAgICAgICAgYm9yZGVyOiB7CiAgICAgICAgICAgICAgdG9wOiB7CiAgICAgICAgICAgICAgICBzdHlsZTogJ3RoaW4nCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBib3R0b206IHsKICAgICAgICAgICAgICAgIHN0eWxlOiAndGhpbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGxlZnQ6IHsKICAgICAgICAgICAgICAgIHN0eWxlOiAndGhpbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHJpZ2h0OiB7CiAgICAgICAgICAgICAgICBzdHlsZTogJ3RoaW4nCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgICAvLyB0aXRsZTogXy5wbHVjayh0aGlzLnN0YXRpc3RpY3NSZXN1bHQudGFibGVfaGVhZCwgJ3RpdGxlJyksCiAgICAgICAgICAgIHRpdGxlOiBfLnBsdWNrKHRoaXMuY29sdW1ucywgJ3RpdGxlJyksCiAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICBkYXRhOiB0aGlzLnN0YXRpc3RpY3NSZXN1bHQsCiAgICAgICAgICAgIGF1dG9XaWR0aDogdHJ1ZSwKICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lLAogICAgICAgICAgICBoZWFkZXJTdHlsZTogaGVhZGVyU3R5bGUsCiAgICAgICAgICAgIGJvZHlTdHlsZTogYm9keVN0eWxlLAogICAgICAgICAgfTsKCiAgICAgICAgICBleGNlbC5leHBvcnRfYXJyYXlfdG9fZXhjZWxfc3R5bGUocGFyYW1zKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kTWVzc2FnZS5pbmZvKCfooajmoLzmlbDmja7kuI3og73kuLrnqbrvvIEnKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAvLyB0aGlzLiRzdG9yZS5jb21taXQoJ1NUQVRfREFZX1NFVF9QUk9QRVJUWV9CWV9LRVknLCB7IGtleTogJ2V4cG9ydExvYWRpbmcnLCB2YWx1ZTogZmFsc2UgfSkKICAgICAgfQogICAgfSwKCiAgICBoYW5kbGVMb2FkRGF0YTogYXN5bmMgZnVuY3Rpb24gKGl0ZW0sIGNhbGxiYWNrKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKCJoYW5kbGVMb2FkRGF0YS0tLWl0ZW0+Pj4iICsgSlNPTi5zdHJpbmdpZnkoaXRlbSkpOwogICAgICBsZXQgaXRlbURhdGEgPSBnZXRUcmVlTm9kZUl0ZW0odGhpcy5nZXRNZXJjaGFudERlcGFydG1lbnRMaXN0LCdkZXBhcnRtZW50X2lkJywgJ2NoaWxkcmVuJywgaXRlbS5rZXlfMTAwKTsKICAgICAgLy8gY29uc29sZS5sb2coImhhbmRsZUxvYWREYXRhLS0tZmluZCBpdGVtRGF0YSBlcXVhbHM+Pj4iICsgSlNPTi5zdHJpbmdpZnkoaXRlbURhdGEpKTsKICAgICAgbGV0IGxldmVsID0gMDsKICAgICAgaWYgKGl0ZW1EYXRhLmxlbmd0aCA+IDApewogICAgICAgIGlmIChpdGVtRGF0YVswXS5jaGlsZHJlbi5sZW5ndGggPiAwKXsKICAgICAgICAgIGxldmVsID0gaXRlbURhdGFbMF0ubGV2ZWwgKyAxOwogICAgICAgIH0KICAgICAgfQoKICAgICAgbGV0IGRlcGFydEFycmF5ID0gZ2V0VHJlZU5vZGVzKGl0ZW1EYXRhLCAnZGVwYXJ0bWVudF9pZCcsICdjaGlsZHJlbicpOwogICAgICBsZXQgYXJyYXlSZXN1bHQgPSBkZXBhcnRBcnJheS5qb2luKCcsJyk7CiAgICAgIC8vIGNvbnNvbGUubG9nKCJoYW5kbGVMb2FkRGF0YS0tLWFycmF5UmVzdWx0Pj4+IiArIGFycmF5UmVzdWx0KTsKCiAgICAgIGxldCBkYXRhID0gYXdhaXQgdGhpcy5xdWVyeUNoaWxkU3RhdChpdGVtLCBhcnJheVJlc3VsdCwgbGV2ZWwpOwogICAgICAvLyBjb25zb2xlLmxvZygiaGFuZGxlTG9hZERhdGEtLS1kYXRhPj4+IiArIEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICB9LAoKICAgIHF1ZXJ5Q2hpbGRTdGF0OiBhc3luYyBmdW5jdGlvbihpdGVtLCB2YWx1ZSwgbGV2ZWwpIHsKICAgICAgLy8gY29uc29sZS5sb2coInF1ZXJ5Q2hpbGRTdGF0LS0taXRlbT4+PiIgKyBKU09OLnN0cmluZ2lmeShpdGVtKSk7CiAgICAgIGxldCBwYXJhbXMgPSB7CiAgICAgICAgbWVyY2hhbnRfaWQ6IHRoaXMuJHN0b3JlLnN0YXRlLnVzZXIuY3VyTWVyY2hhbnRJZCwKICAgICAgICB1bml0OiB0aGlzLmZvcm1EYXRhLnVuaXQsCiAgICAgICAgc3RhcnQ6IGl0ZW0ua2V5XzEsCiAgICAgICAgZW5kOiBpdGVtLmtleV8xLAogICAgICAgIGtleTogdGhpcy5mb3JtRGF0YS5rZXksCiAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgIGxldmVsOiBsZXZlbCwKICAgICAgICBmb3JtYXQ6IDEsCgogICAgICB9OwogICAgICAvLyBjb25zb2xlLmxvZygicXVlcnlDaGlsZFN0YXQtLS1wYXJhbXM+Pj4+IiArIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpOwogICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3N0YXRpc3RpY3NTYWxlJywgcGFyYW1zKTsKICAgICAgLy8gY29uc29sZS5sb2coInF1ZXJ5Q2hpbGRTdGF0LS0tcmVzPj4+PiIgKyBKU09OLnN0cmluZ2lmeShyZXMpKTsKICAgICAgcmV0dXJuIHJlcy5yZXN1bHQ7CgogICAgfSwKCiAgfQp9Cg=="},null]}