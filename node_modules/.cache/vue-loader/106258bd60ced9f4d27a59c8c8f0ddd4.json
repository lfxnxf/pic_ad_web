{"remainingRequest":"/Users/zhang/工作/pic_ad/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhang/工作/pic_ad/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhang/工作/pic_ad/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhang/工作/pic_ad/src/views/statistics/stat-order/components/form.vue?vue&type=template&id=51e3afe5&scoped=true&","dependencies":[{"path":"/Users/zhang/工作/pic_ad/src/views/statistics/stat-order/components/form.vue","mtime":1640594514671},{"path":"/Users/zhang/工作/pic_ad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/工作/pic_ad/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhang/工作/pic_ad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/工作/pic_ad/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}