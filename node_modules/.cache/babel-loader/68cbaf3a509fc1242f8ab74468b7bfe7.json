{"remainingRequest":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js!/Users/zhang/canteen_manage/src/libs/sign.js","dependencies":[{"path":"/Users/zhang/canteen_manage/src/libs/sign.js","mtime":1638355006758},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKCi8qKgogKiDor7fmsYLlj4LmlbDnrb7lkI0KICovCmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJzsKCnZhciBnZXRQYXJhbXMgPSBmdW5jdGlvbiBnZXRQYXJhbXMocGFyYW1zKSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpLnNvcnQoKTsKICB2YXIgbGlzdCA9IFtdOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciB2YWx1ZSA9IHBhcmFtc1trZXlzW2ldXTsKCiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHZhciBwID0ga2V5c1tpXSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7CiAgICBwID0gcC5yZXBsYWNlKC9cKC9nLCAnJTI4Jyk7CiAgICBwID0gcC5yZXBsYWNlKC9cKS9nLCAnJTI5Jyk7CiAgICBwID0gcC5yZXBsYWNlKC9cKy9nLCAnJTIwJyk7CiAgICBwID0gcC5yZXBsYWNlKC9cXCEvZywgJyUyMScpOwogICAgcCA9IHAucmVwbGFjZSgvXFx+L2csICclN0UnKTsKICAgIHAgPSBwLnJlcGxhY2UoL1wqL2csICclMkEnKTsKICAgIGxpc3QucHVzaChwKTsKICB9CgogIHJldHVybiBsaXN0LmpvaW4oJyYnKTsKfTsKCnZhciBzaWduID0gZnVuY3Rpb24gc2lnbihwYXJhbXMsIHNlcnZlciwga2V5KSB7CiAgdmFyIGJhc2VTdHJpbmcgPSBlbmNvZGVVUklDb21wb25lbnQoc2VydmVyKSArIGVuY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbXMocGFyYW1zKSk7CiAgdmFyIHNpZ24gPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMScsIGtleSkudXBkYXRlKGJhc2VTdHJpbmcpLmRpZ2VzdCgpLnRvU3RyaW5nKCdiYXNlNjQnKTsgLy8gY29uc29sZS5sb2coJ3NpZ24gPT0+ICcgKyBzaWduKQoKICByZXR1cm4gc2lnbjsKfTsKCmV4cG9ydCBkZWZhdWx0IHNpZ247"},{"version":3,"sources":["/Users/zhang/canteen_manage/src/libs/sign.js"],"names":["crypto","getParams","params","keys","Object","sort","list","i","length","value","p","encodeURIComponent","replace","push","join","sign","server","key","baseString","createHmac","update","digest","toString"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAY;AAC5B,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,EAAoBG,IAApB,EAAX;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,KAAK,GAAGP,MAAM,CAACC,IAAI,CAACI,CAAD,CAAL,CAAlB;;AACA,QAAI,CAACE,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;AACvB;AACH;;AACD,QAAIC,CAAC,GAAGP,IAAI,CAACI,CAAD,CAAJ,GAAU,GAAV,GAAgBI,kBAAkB,CAACF,KAAD,CAA1C;AACAC,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,KAAjB,CAAJ;AACAF,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,KAAjB,CAAJ;AACAF,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,KAAjB,CAAJ;AACAF,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,MAAV,EAAkB,KAAlB,CAAJ;AACAF,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,MAAV,EAAkB,KAAlB,CAAJ;AACAF,IAAAA,CAAC,GAAGA,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,KAAjB,CAAJ;AACAN,IAAAA,IAAI,CAACO,IAAL,CAAUH,CAAV;AACD;;AACD,SAAOJ,IAAI,CAACQ,IAAL,CAAU,GAAV,CAAP;AACD,CAlBD;;AAoBA,IAAMC,IAAI,GAAG,cAACb,MAAD,EAASc,MAAT,EAAiBC,GAAjB,EAAyB;AACpC,MAAIC,UAAU,GAAGP,kBAAkB,CAACK,MAAD,CAAlB,GAA6BL,kBAAkB,CAACV,SAAS,CAACC,MAAD,CAAV,CAAhE;AACA,MAAIa,IAAI,GAAGf,MAAM,CAACmB,UAAP,CAAkB,MAAlB,EAA0BF,GAA1B,EAA+BG,MAA/B,CAAsCF,UAAtC,EAAkDG,MAAlD,GAA2DC,QAA3D,CAAoE,QAApE,CAAX,CAFoC,CAGpC;;AACA,SAAOP,IAAP;AACD,CALD;;AAOA,eAAeA,IAAf","sourcesContent":["/**\n * 请求参数签名\n */\n\nimport crypto from 'crypto'\n\nconst getParams = (params) => {\n  var keys = Object.keys(params).sort()\n  var list = []\n  for (var i = 0; i < keys.length; i++) {\n    var value = params[keys[i]]\n    if (!value && value !== 0) {\n        continue;\n    }\n    let p = keys[i] + '=' + encodeURIComponent(value)\n    p = p.replace(/\\(/g, '%28')\n    p = p.replace(/\\)/g, '%29')\n    p = p.replace(/\\+/g, '%20')\n    p = p.replace(/\\\\!/g, '%21')\n    p = p.replace(/\\\\~/g, '%7E')\n    p = p.replace(/\\*/g, '%2A')\n    list.push(p)\n  }\n  return list.join('&')\n}\n\nconst sign = (params, server, key) => {\n  var baseString = encodeURIComponent(server) + encodeURIComponent(getParams(params));\n  var sign = crypto.createHmac('sha1', key).update(baseString).digest().toString('base64')\n  // console.log('sign ==> ' + sign)\n  return sign\n}\n\nexport default sign\n"]}]}