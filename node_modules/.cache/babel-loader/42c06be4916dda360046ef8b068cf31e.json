{"remainingRequest":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js!/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhang/canteen_manage/src/views/common/login/login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhang/canteen_manage/src/views/common/login/login.vue","mtime":1644998572167},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}