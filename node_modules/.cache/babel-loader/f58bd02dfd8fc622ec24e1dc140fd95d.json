{"remainingRequest":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js!/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhang/canteen_manage/src/views/setting/role-setting/components/add-role-goods-modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhang/canteen_manage/src/views/setting/role-setting/components/add-role-goods-modal.vue","mtime":1638516298176},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/zhang/canteen_manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhang/canteen_manage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}